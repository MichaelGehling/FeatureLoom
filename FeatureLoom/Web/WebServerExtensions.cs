using Microsoft.AspNetCore.Http;
using System;
using System.Net;
using System.Threading.Tasks;

namespace FeatureLoom.Web
{
    public static class WebServerExtensions
    {
        public static void HandleRequest(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, Task<bool>> handleAction, string permissionWildcard = null) => webserver.AddRequestHandler(new SimpleWebRequestHandler(route, handleAction, null, permissionWildcard));
        public static void HandleRequest(this IWebServer webserver, string route, Func<string> handleAction, string permissionWildcard = null) => webserver.AddRequestHandler(new SimpleWebRequestHandler(route, handleAction, null, permissionWildcard));
        public static void HandleRequest(this IWebServer webserver, string route, Func<IWebRequest, string> handleAction, string permissionWildcard = null) => webserver.AddRequestHandler(new SimpleWebRequestHandler(route, handleAction, null, permissionWildcard));
        public static void HandleRequest(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, string> handleAction, string permissionWildcard = null) => webserver.AddRequestHandler(new SimpleWebRequestHandler(route, handleAction, null, permissionWildcard));
        public static void HandleRequest(this IWebServer webserver, string route, Func<Task<string>> handleAction, string permissionWildcard = null) => webserver.AddRequestHandler(new SimpleWebRequestHandler(route, handleAction, null, permissionWildcard));
        public static void HandleRequest(this IWebServer webserver, string route, Func<IWebRequest, Task<string>> handleAction, string permissionWildcard = null) => webserver.AddRequestHandler(new SimpleWebRequestHandler(route, handleAction, null, permissionWildcard));
        public static void HandleRequest(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, Task<string>> handleAction, string permissionWildcard = null) => webserver.AddRequestHandler(new SimpleWebRequestHandler(route, handleAction, null, permissionWildcard));

        public static void HandleGET(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, Task<bool>> handleAction, string permissionWildcard = null) => webserver.AddRequestHandler(new SimpleWebRequestHandler(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET(this IWebServer webserver, string route, Func<string> handleAction, string permissionWildcard = null) => webserver.AddRequestHandler(new SimpleWebRequestHandler(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET(this IWebServer webserver, string route, Func<IWebRequest, string> handleAction, string permissionWildcard = null) => webserver.AddRequestHandler(new SimpleWebRequestHandler(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, string> handleAction, string permissionWildcard = null) => webserver.AddRequestHandler(new SimpleWebRequestHandler(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET(this IWebServer webserver, string route, Func<Task<string>> handleAction, string permissionWildcard = null) => webserver.AddRequestHandler(new SimpleWebRequestHandler(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET(this IWebServer webserver, string route, Func<IWebRequest, Task<string>> handleAction, string permissionWildcard = null) => webserver.AddRequestHandler(new SimpleWebRequestHandler(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, Task<string>> handleAction, string permissionWildcard = null) => webserver.AddRequestHandler(new SimpleWebRequestHandler(route, handleAction, HttpMethods.Get, permissionWildcard));

        public static void HandleRequest<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<bool>> handleAction, string permissionWildcard = null) where T1: IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1>(this IWebServer webserver, string route, Func<T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1>(this IWebServer webserver, string route, Func<T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, null, permissionWildcard));

        public static void HandleGET<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1>(this IWebServer webserver, string route, Func<T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1>(this IWebServer webserver, string route, Func<T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Get, permissionWildcard));        

        public static void HandleRequest<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, null, permissionWildcard));

        public static void HandleGET<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Get, permissionWildcard));

        public static void HandleRequest<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, null, permissionWildcard));

        public static void HandleGET<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Get, permissionWildcard));

        public static void HandleRequest<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, null, permissionWildcard));
        public static void HandleRequest<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, null, permissionWildcard));

        public static void HandleGET<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Get, permissionWildcard));
        public static void HandleGET<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Get, permissionWildcard));




        public static void HandlePOST<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1>(this IWebServer webserver, string route, Func<T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1>(this IWebServer webserver, string route, Func<T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Post, permissionWildcard));

        public static void HandlePOST<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Post, permissionWildcard));

        public static void HandlePOST<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Post, permissionWildcard));

        public static void HandlePOST<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Post, permissionWildcard));
        public static void HandlePOST<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Post, permissionWildcard));




        public static void HandlePUT<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1>(this IWebServer webserver, string route, Func<T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1>(this IWebServer webserver, string route, Func<T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Put, permissionWildcard));

        public static void HandlePUT<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Put, permissionWildcard));

        public static void HandlePUT<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Put, permissionWildcard));

        public static void HandlePUT<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Put, permissionWildcard));
        public static void HandlePUT<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Put, permissionWildcard));



        public static void HandleDELETE<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1>(this IWebServer webserver, string route, Func<T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, string> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1>(this IWebServer webserver, string route, Func<T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Delete, permissionWildcard));

        public static void HandleDELETE<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Delete, permissionWildcard));

        public static void HandleDELETE<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Delete, permissionWildcard));

        public static void HandleDELETE<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<bool>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, string> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Delete, permissionWildcard));
        public static void HandleDELETE<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<string>> handleAction, string permissionWildcard = null) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible => webserver.AddRequestHandler(new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Delete, permissionWildcard));



        public static Task Run(this IWebServer webserver, HttpEndpointConfig endpoint)
        {
            webserver.AddEndpoint(endpoint);
            return webserver.Run();            
        }

        public static Task Run(this IWebServer webserver, IPAddress address, int port) => webserver.Run(new HttpEndpointConfig(address, port));
        public static Task Run(this IWebServer webserver, IPAddress address, int port, string certificateName) => webserver.Run(new HttpEndpointConfig(address, port, certificateName));

        public static void InterceptRequest(this IWebServer webserver, Func<IWebRequest, IWebResponse, Task<bool>> interceptRequest) => webserver.AddRequestInterceptor(new SimpleWebRequestInterceptor(interceptRequest));


    }
}