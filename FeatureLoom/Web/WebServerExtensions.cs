using Microsoft.AspNetCore.Http;
using System;
using System.Net;
using System.Threading.Tasks;

namespace FeatureLoom.Web
{
    public static class WebServerExtensions
    {

        public static Task Run(this IWebServer webserver, HttpEndpointConfig endpoint)
        {
            webserver.AddEndpoint(endpoint);
            return webserver.Run();
        }

        public static Task Run(this IWebServer webserver, IPAddress address, int port) => webserver.Run(new HttpEndpointConfig(address, port));
        public static Task Run(this IWebServer webserver, IPAddress address, int port, string certificateName) => webserver.Run(new HttpEndpointConfig(address, port, certificateName));

        public static void InterceptRequest(this IWebServer webserver, Func<IWebRequest, IWebResponse, Task<HandlerResult>> interceptRequest) => webserver.AddRequestInterceptor(new SimpleWebRequestInterceptor(interceptRequest));
        public static void InterceptRequest(this IWebServer webserver, Func<IWebRequest, Task<HandlerResult>> interceptRequest) => webserver.AddRequestInterceptor(new SimpleWebRequestInterceptor((req, resp) => interceptRequest(req)));
        public static void InterceptRequest(this IWebServer webserver, Func<IWebResponse, Task<HandlerResult>> interceptRequest) => webserver.AddRequestInterceptor(new SimpleWebRequestInterceptor((req, resp) => interceptRequest(resp)));
        public static void InterceptRequest(this IWebServer webserver, Func<Task<HandlerResult>> interceptRequest) => webserver.AddRequestInterceptor(new SimpleWebRequestInterceptor((req, resp) => interceptRequest()));

        public static void InterceptRequest(this IWebServer webserver, Func<IWebRequest, IWebResponse, HandlerResult> interceptRequest) => webserver.AddRequestInterceptor(new SimpleWebRequestInterceptor((req, resp) => Task.FromResult(interceptRequest(req, resp))));
        public static void InterceptRequest(this IWebServer webserver, Func<IWebRequest, HandlerResult> interceptRequest) => webserver.AddRequestInterceptor(new SimpleWebRequestInterceptor((req, resp) => Task.FromResult(interceptRequest(req))));
        public static void InterceptRequest(this IWebServer webserver, Func<IWebResponse, HandlerResult> interceptRequest) => webserver.AddRequestInterceptor(new SimpleWebRequestInterceptor((req, resp) => Task.FromResult(interceptRequest(resp))));
        public static void InterceptRequest(this IWebServer webserver, Func<HandlerResult> interceptRequest) => webserver.AddRequestInterceptor(new SimpleWebRequestInterceptor((req, resp) => Task.FromResult(interceptRequest())));


        #region HandleRequestExtensions
        public static IExtensibleWebRequestHandler HandleRequest(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest(this IWebServer webserver, string route, Func<HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest(this IWebServer webserver, string route, Func<IWebRequest, HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest(this IWebServer webserver, string route, Func<Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest(this IWebServer webserver, string route, Func<IWebRequest, Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }        

        public static IExtensibleWebRequestHandler HandleGET(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET(this IWebServer webserver, string route, Func<HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET(this IWebServer webserver, string route, Func<IWebRequest, HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET(this IWebServer webserver, string route, Func<Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET(this IWebServer webserver, string route, Func<IWebRequest, Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }        

        public static IExtensibleWebRequestHandler HandleRequest<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<HandlerResult>> handleAction) where T1: IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1>(this IWebServer webserver, string route, Func<T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1>(this IWebServer webserver, string route, Func<T1, Task<HandlerResult>> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, Task<HandlerResult>> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }        

        public static IExtensibleWebRequestHandler HandleGET<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<HandlerResult>> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1>(this IWebServer webserver, string route, Func<T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1>(this IWebServer webserver, string route, Func<T1, Task<HandlerResult>> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, Task<HandlerResult>> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }

        public static IExtensibleWebRequestHandler HandleRequest<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }

        public static IExtensibleWebRequestHandler HandleGET<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }

        public static IExtensibleWebRequestHandler HandleRequest<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }

        public static IExtensibleWebRequestHandler HandleGET<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }

        public static IExtensibleWebRequestHandler HandleRequest<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleRequest<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, null); webserver.AddRequestHandler(handler); return handler; }

        public static IExtensibleWebRequestHandler HandleGET<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleGET<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Get); webserver.AddRequestHandler(handler); return handler; }


        public static IExtensibleWebRequestHandler HandlePOST(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST(this IWebServer webserver, string route, Func<HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST(this IWebServer webserver, string route, Func<IWebRequest, HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST(this IWebServer webserver, string route, Func<Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST(this IWebServer webserver, string route, Func<IWebRequest, Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }

        public static IExtensibleWebRequestHandler HandlePOST<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<HandlerResult>> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1>(this IWebServer webserver, string route, Func<T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1>(this IWebServer webserver, string route, Func<T1, Task<HandlerResult>> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, Task<HandlerResult>> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }


        public static IExtensibleWebRequestHandler HandlePOST<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }


        public static IExtensibleWebRequestHandler HandlePOST<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }

        public static IExtensibleWebRequestHandler HandlePOST<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePOST<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Post); webserver.AddRequestHandler(handler); return handler; }



        public static IExtensibleWebRequestHandler HandlePUT(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT(this IWebServer webserver, string route, Func<HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT(this IWebServer webserver, string route, Func<IWebRequest, HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT(this IWebServer webserver, string route, Func<Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT(this IWebServer webserver, string route, Func<IWebRequest, Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }

        public static IExtensibleWebRequestHandler HandlePUT<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<HandlerResult>> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1>(this IWebServer webserver, string route, Func<T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1>(this IWebServer webserver, string route, Func<T1, Task<HandlerResult>> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, Task<HandlerResult>> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }


        public static IExtensibleWebRequestHandler HandlePUT<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }        

        public static IExtensibleWebRequestHandler HandlePUT<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }        

        public static IExtensibleWebRequestHandler HandlePUT<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandlePUT<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Put); webserver.AddRequestHandler(handler); return handler; }



        public static IExtensibleWebRequestHandler HandleDELETE(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE(this IWebServer webserver, string route, Func<HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE(this IWebServer webserver, string route, Func<IWebRequest, HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, HandlerResult> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE(this IWebServer webserver, string route, Func<Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE(this IWebServer webserver, string route, Func<IWebRequest, Task<HandlerResult>> handleAction) { var handler = new SimpleWebRequestHandler(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }

        public static IExtensibleWebRequestHandler HandleDELETE<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, Task<HandlerResult>> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1>(this IWebServer webserver, string route, Func<T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, HandlerResult> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1>(this IWebServer webserver, string route, Func<T1, Task<HandlerResult>> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1>(this IWebServer webserver, string route, Func<IWebRequest, T1, Task<HandlerResult>> handleAction) where T1 : IConvertible { var handler = new SimpleWebRequestHandler<T1>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }        

        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2>(this IWebServer webserver, string route, Func<T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }        

        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2, T3>(this IWebServer webserver, string route, Func<T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2, T3>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }        

        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, IWebResponse, T1, T2, T3, T4, HandlerResult> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }
        public static IExtensibleWebRequestHandler HandleDELETE<T1, T2, T3, T4>(this IWebServer webserver, string route, Func<IWebRequest, T1, T2, T3, T4, Task<HandlerResult>> handleAction) where T1 : IConvertible where T2 : IConvertible where T3 : IConvertible where T4 : IConvertible { var handler = new SimpleWebRequestHandler<T1, T2, T3, T4>(route, handleAction, HttpMethods.Delete); webserver.AddRequestHandler(handler); return handler; }

        #endregion HandleRequestExtensions

    }
}